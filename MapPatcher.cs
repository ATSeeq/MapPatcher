/// <summary>
/// Console app to patch .map files generated by a Delphi project.
/// The goal is to replace all source file names with the full path to the source file. 
/// This is needed to allow the .map file to be converted into a .pdb file using the map2pdb tool.
/// </summary>
/// <remarks>
/// Usage: DelphiMapPatcher <map file name> <source file path(s)>
/// 
/// Where the source file paths are a list of root directories to
/// search for source files.
/// Examples of lines to be patched:
///     Line numbers for System(System.pas) segment .text
///     Line numbers for System.SysConst(System.SysConst.pas) segment .text
///     Line numbers for Winapi.PsAPI(Winapi.PsAPI.pas) segment .text
/// </remarks>

class MapPatcher
{
    /// <summary>
    /// Creates a backup of the .map file and patches it with the full path to the source files.
    /// </summary>
    /// <param name="args"> The command line arguments. </param>
    static void Main(string[] args)
    {
        if (!TryParseArgs(args, out string mapFileName, out string[] sourceRootDirs)) 
            return;

        File.Copy(mapFileName, $"{mapFileName}.bak", true);
        PatchMapFile(mapFileName, sourceRootDirs);
    }

    /// <summary>
    /// Patch the map file by replacing the source file names with the full path to the source file.
    /// It goes through the map file and finds lines that contain the source file.
    /// It replaces the source file name with the full path to the source file, which is found by searching in the specified source file paths.
    /// The rest of the map file remains untouched.
    /// </summary>
    /// <param name="mapFileName">The name of the map file to patch.</param>
    /// <param name="sourceRootDirs">The root directories to search for source files.</param>
    /// <remarks>
    /// A warning is printed if the source file is not found or if a full path is already specified but the operation is not aborted.
    /// </remarks>
    private static void PatchMapFile(string mapFileName, string[] sourceRootDirs)
    {
        var mapFileLines = File.ReadAllLines(mapFileName);
        var patchedMapFileLines = GetPatchedMapFileLines(mapFileLines, sourceRootDirs);
        File.WriteAllLines(mapFileName, patchedMapFileLines);
    }

    private static string[] GetPatchedMapFileLines(string[] mapFileLines, string[] sourceRootDirs)
    {
        var patchedMapFileLines = new Dictionary<int, string>();
        for (int i = 0; i < mapFileLines.Length; i++)
        {
            var line = mapFileLines[i];
            if (!line.Contains("Line numbers for "))
                continue;

            var sourceFileName = line.Split('(')[1].Split(')')[0];
            if (sourceFileName.Contains(Path.DirectorySeparatorChar))
            {
                Console.WriteLine($"Warning: Source file already has full path: {sourceFileName}");
                continue;
            }

            var sourceFilePath = FindSourceFilePath(sourceFileName, sourceRootDirs);
            if (sourceFilePath == null)
            {
                Console.WriteLine($"Warning: Source file not found: {sourceFileName}");
                continue;
            }

            var patchedLine = line.Replace(sourceFileName, sourceFilePath);
            patchedMapFileLines[i] = patchedLine;
        }

        foreach (var item in patchedMapFileLines)
        {
            mapFileLines[item.Key] = item.Value;
        }

        return mapFileLines;
    }

    // generate an xml summary
    /// <summary>
    /// Search for the source file name in the root directories and their subdirectories.
    /// </summary>
    /// <param name="sourceFileName"> The name of the source file to search for. Eg: System.pas </param>
    /// <param name="sourceRootDirs"> A list of root directories to search for the source file. </param>
    /// <returns> The full path to the source file if found, otherwise null. </returns>
    static string? FindSourceFilePath(string sourceFileName, string[] sourceRootDirs)
    {
        foreach (var sourceRootDir in sourceRootDirs)
        {
            var sourceFilePath = FindSourceFilePath(sourceFileName, sourceRootDir);
            if (sourceFilePath != null)
                return sourceFilePath;
        }

        return null;
    }

    /// <summary>
    /// Search for the source file name in the root directory and its subdirectories.
    /// </summary>
    /// <param name="sourceFileName"> The name of the source file to search for. Eg: System.pas </param>
    /// <param name="sourceRootDir"> The root directory to search for the source file. </param>
    /// <returns> The full path to the source file if found, otherwise null. </returns>
    static string? FindSourceFilePath(string sourceFileName, string sourceRootDir)
    {
        return Directory.GetFiles(sourceRootDir, sourceFileName, SearchOption.AllDirectories).FirstOrDefault();
    }

    /// <summary>
    /// Try to obtain the map file name and source file paths from the command line arguments.
    /// </summary>
    /// <param name="args"> The command line arguments. </param>
    /// <param name="mapFileName"> The .map file name. </param>
    /// <param name="sourceFilePaths"> The source file paths. </param>
    /// <returns> True if the arguments were parsed successfully, otherwise false. </returns>
    static bool TryParseArgs(string[] args, out string mapFileName, out string[] sourceFilePaths)
    {
        mapFileName = string.Empty;
        sourceFilePaths = [];

        if (args.Length < 2)
        {
            Console.WriteLine("A tool to patch .map files generated by a Delphi project.");
            Console.WriteLine("The goal is to replace all source file names with the full path to the source file.");
            Console.WriteLine("Usage: DelphiMapPatcher <map file name> <source file path(s)>");
            return false;
        }

        mapFileName = args[0];
        if (Path.GetExtension(mapFileName) != ".map")
        {
            Console.WriteLine($"Invalid map file: {mapFileName}");
            return false;
        }

        if (!File.Exists(mapFileName))
        {
            Console.WriteLine($"Map file not found: {mapFileName}");
            return false;
        }

        sourceFilePaths = args.Skip(1).ToArray();
        if (sourceFilePaths.Length == 0)
        {
            Console.WriteLine("No source file paths specified");
            return false;
        }

        return true;
    }
}
